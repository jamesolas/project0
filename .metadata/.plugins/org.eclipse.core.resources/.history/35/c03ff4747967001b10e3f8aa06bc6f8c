package com.app.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.app.dao.CustomerDAO;
import com.app.dbutil.ConnectionClosers;
import com.app.dbutil.PostgresqlConnection;
import com.app.exception.BusinessException;
import com.app.model.Car;
import com.app.model.Loan;
import com.app.model.Payment;

public class CustomerDAOImpl implements CustomerDAO{
	
	private static Logger log = Logger.getLogger(CustomerDAOImpl.class);

	@Override
	public List<Car> viewOpenCars() throws BusinessException {
		List<Car> carList = new ArrayList<>();
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "Select carid, make, model, status from project0.car where status = 'open'";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				Car car = new Car();
				car.setCarId(resultSet.getInt("carid"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("model"));
				car.setStatus(resultSet.getString("status"));
				carList.add(car);
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		return carList;
	}

	@Override
	public int makeOffer(int userId, int carId, float amount) throws BusinessException {
		int a = 0;	
		try {
		Connection connection = PostgresqlConnection.getConnection();
		String sql = "insert into project0.offer (userid, carid, amount) values(?,?,?)";
		PreparedStatement preparedStatement = connection.prepareStatement(sql);
		preparedStatement.setInt(1, userId);
		preparedStatement.setInt(2, carId);
		preparedStatement.setFloat(3, amount);
		a = preparedStatement.executeUpdate();
		
		} catch (ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error");
		} 
		
		return a;
	}

	@Override
	public List<Car> viewOwnedCars(int userId) throws BusinessException {
		List<Car> carList = new ArrayList<>();
		Connection connection = null;
		try {
			connection = PostgresqlConnection.getConnection();
			String sql = "Select carid, make, model,status, userid from project0.car where userid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, userId);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				Car car = new Car();
				car.setCarId(resultSet.getInt("carid"));
				car.setMake(resultSet.getString("make"));
				car.setModel(resultSet.getString("model"));
				car.setStatus(resultSet.getString("status"));
				car.setUserId(resultSet.getInt("userid"));
				carList.add(car);
			}if(carList.size() == 0) {
				throw new BusinessException("No owned cars");
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}finally {
			ConnectionClosers.close(connection);
		}
		return carList;
	}

	@Override
	public Loan viewRemainingPayments(int userId, int carId) throws BusinessException {
		Loan loan = null;
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "Select loanid, purchaseprice, principal,interest, userid, carid, payments_remaining, payment_amount"
					+ " from project0.loan where userid = ? and carid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, userId);
			preparedStatement.setInt(2, carId);
			ResultSet resultSet = preparedStatement.executeQuery();
				loan.setLoanId(resultSet.getInt("loanId"));
				loan.setPurchasePrice(resultSet.getFloat("purchaseprice"));
				loan.setPrincipal(resultSet.getFloat("principal"));
				loan.setInterest(resultSet.getFloat("interest"));
				loan.setCarId(resultSet.getInt("carid"));
				loan.setMake(resultSet.getString("make"));
				loan.setModel(resultSet.getString("model"));
				loan.setStatus(resultSet.getString("status"));
				loan.setUserId(resultSet.getInt("userid"));
			
			}if(loan == null) {
				throw new BusinessException("No owned cars");
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		return loan;
	}

	@Override
	public int makePayment(int userId, int carId, int loanId) {
		
		return 0;
	}

}
